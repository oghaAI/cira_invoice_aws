/**
 * CIRA Invoice Processing System - Job Model
 *
 * Defines the core Job entity representing an invoice processing request.
 * This model represents the central state machine for tracking PDFs through
 * the OCR → LLM → Completion workflow orchestrated by AWS Step Functions.
 *
 * Database Mapping:
 * - Maps to 'jobs' table in PostgreSQL
 * - Uses UUID for primary key (id field)
 * - Includes database triggers for auto-updating 'updated_at' timestamp
 * - Foreign key relationship to job_results table (one-to-one)
 *
 * State Machine Flow:
 * queued → processing → completed
 *                  ↘ failed
 *
 * @see docs/architecture-mvp.md - Job Model section
 * @see packages/database/src/index.ts - Full implementation with database operations
 */

/**
 * Job status enumeration representing the lifecycle states of an invoice processing job.
 *
 * State Definitions:
 * - 'queued': Job created but not yet picked up by Step Functions
 * - 'processing': Job actively being processed (OCR or LLM phase)
 * - 'completed': Job successfully processed with results available
 * - 'failed': Job encountered unrecoverable error during processing
 */
export type JobStatus = 'queued' | 'processing' | 'completed' | 'failed';

/**
 * Core Job entity interface with comprehensive lifecycle tracking.
 * Represents a single invoice processing request from submission to completion.
 *
 * Key Relationships:
 * - One-to-one with JobResult (via jobId foreign key)
 * - Many-to-one with ApiKey (via clientId, optional)
 * - Referenced by Step Functions execution state
 *
 * Indexing Strategy:
 * - Primary: id (UUID, clustered)
 * - Secondary: status (for queue processing)
 * - Secondary: created_at (for chronological queries)
 * - Secondary: client_id (for client-specific listings)
 */
export interface Job {
  /** Unique job identifier (UUID generated by database) */
  id: string;
  /** Optional client identifier for API key attribution and billing tracking */
  clientId: string | null;
  /** Current status in the processing pipeline state machine */
  status: JobStatus;
  /** Source PDF URL that will be processed by the OCR → LLM pipeline */
  pdfUrl: string;
  /** Timestamp when job was initially created and entered 'queued' status */
  createdAt: Date;
  /** Timestamp of last status update (auto-maintained by database trigger) */
  updatedAt: Date;
  /** Timestamp when job reached final state ('completed' or 'failed'), null during processing */
  completedAt: Date | null;
  /** Detailed error message if job failed, null for successful or in-progress jobs */
  errorMessage: string | null;
}
